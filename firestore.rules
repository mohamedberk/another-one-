rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function hasUserRole(role) {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return hasUserRole('admin');
    }
    
    function isAgency() {
      return hasUserRole('agency');
    }
    
    function isPartner() {
      return hasUserRole('partner');
    }
    
    function isDriver() {
      return hasUserRole('driver');
    }
    
    function isSameAgency(agencyId) {
      return isSignedIn() && (
        (isAgency() && request.auth.uid == agencyId) ||
        (isPartner() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyId == agencyId) ||
        (isDriver() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyId == agencyId)
      );
    }
    
    function isSelf(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Public collections
    match /waitlist/{docId} {
      allow read: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn() && (
        request.auth.uid == userId || // Self
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') // Admin
      );
      allow create: if 
        isSignedIn() && (
          request.auth.uid == userId || // Self-creation
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') // Admin
        );
      allow update: if isSignedIn() && (
        request.auth.uid == userId || // Self
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') // Admin
      );
      allow delete: if isAdmin();
    }
    
    // Agencies collection
    match /agencies/{agencyId} {
      allow read: if isSignedIn() && (isAdmin() || isSameAgency(agencyId));
      allow create: if isSignedIn() && (
        // Self-creation during claiming process (agency ID matches user ID)
        request.auth.uid == agencyId ||
        // Admin can create agencies
        isAdmin()
      );
      allow update: if isSignedIn() && (isAdmin() || (isAgency() && request.auth.uid == agencyId));
      allow delete: if isAdmin();
    }
    
    // pendingUsers collection - Critical for account claiming
    match /pendingUsers/{docId} {
      allow read: if isSignedIn(); // Allow any signed-in user to read
      
      // Allow agencies to create pending users (partners, drivers)
      allow create: if isSignedIn() && (isAdmin() || isAgency());
      
      // Allow any signed-in user to update ONLY the claimed fields
      // This is specifically to support the account claiming process
      allow update: if isSignedIn() && (
        isAdmin() || 
        (
          // Only allow updates to specific fields during claiming
          request.resource.data.claimed == true &&
          request.resource.data.claimedBy == request.auth.uid &&
          (resource.data.email.lower() == request.auth.token.email.lower()) &&
          resource.data.claimed == false
        )
      );
      
      allow delete: if isAdmin();
    }
    
    // Partners collection
    match /partners/{partnerId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        (isPartner() && (resource.data.uid == request.auth.uid || isSelf(partnerId)))
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && request.resource.data.agencyId == request.auth.uid) ||
        // Allow self-creation during claiming process
        (request.resource.data.uid == request.auth.uid && 
         request.resource.data.email == request.auth.token.email)
      );
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        (isPartner() && (resource.data.uid == request.auth.uid || isSelf(partnerId)))
      );
      allow delete: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid)
      );
    }
    
    // Drivers collection
    match /drivers/{driverId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        (isDriver() && (resource.data.uid == request.auth.uid || 
                       driverId == request.auth.uid ||
                       (exists(/databases/$(database)/documents/drivers/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/drivers/$(request.auth.uid)).data.agencyId == resource.data.agencyId)))
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && request.resource.data.agencyId == request.auth.uid) ||
        // Allow self-creation during claiming process
        (request.resource.data.uid == request.auth.uid && 
         request.resource.data.email == request.auth.token.email)
      );
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        // Driver can update their own document
        (isDriver() && (resource.data.uid == request.auth.uid)) ||
        // Drivers can update their own delay status
        (isDriver() && resource.data.uid == request.auth.uid && 
         (request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['currentDelay', 'delayReason', 'delayReportedAt'])))
      );
      allow delete: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid)
      );
    }
    
    // Vehicles collection
    match /vehicles/{vehicleId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        // Let drivers access vehicles in their agency
        (isDriver() && isDriverInAgency(resource.data.agencyId))
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && request.resource.data.agencyId == request.auth.uid)
      );
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        // Driver can only update status-related fields of their assigned vehicle
        (isDriver() && isDriverInAgency(resource.data.agencyId) && 
         isDriverAssignedToVehicle(vehicleId) &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status']))
      );
      allow delete: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid)
      );
    }
    
    // Helper to check if a driver belongs to an agency
    function isDriverInAgency(agencyId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.agencyId == agencyId;
    }
    
    // Helper to check if driver is assigned to a vehicle
    function isDriverAssignedToVehicle(vehicleId) {
      // Check if the vehicle is permanently assigned to this driver
      let vehicleDoc = get(/databases/$(database)/documents/vehicles/$(vehicleId));
      return vehicleDoc.data.driverId == request.auth.uid || 
             // Or check if this driver has a document with this vehicle ID
             (exists(/databases/$(database)/documents/drivers) &&
             (query(/databases/$(database)/documents/drivers, 
                 where('uid', '==', request.auth.uid), 
                 where('vehicleId', '==', vehicleId),
                 limit(1))).size() > 0);
    }
    
    // Transfers collection
    match /transfers/{transferId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        (isPartner() && resource.data.partnerId == request.auth.uid) ||
        (isDriver() && (resource.data.driverId == request.auth.uid || isDriverByDocId(resource.data.driverId)))
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && request.resource.data.agencyId == request.auth.uid) ||
        (isPartner() && request.resource.data.partnerId == request.auth.uid)
      );
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid) ||
        (isPartner() && resource.data.partnerId == request.auth.uid && 
          (request.resource.data.status == 'pending' || request.resource.data.status == 'cancelled')) ||
        // Driver updates - status changes and delay reporting
        (isDriver() && (resource.data.driverId == request.auth.uid || isDriverByDocId(resource.data.driverId)) && 
          (
            // Status updates
            (request.resource.data.status == 'in_progress' || request.resource.data.status == 'completed') ||
            // Delay reporting - make sure we only check the fields we're updating
            (request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(['delayMinutes', 'delayReason', 'delayReportedAt', 'updatedAt']) &&
             request.resource.data.status == resource.data.status)
          )
        )
      );
      allow delete: if isSignedIn() && (
        isAdmin() || 
        (isAgency() && resource.data.agencyId == request.auth.uid)
      );
    }
    
    // Helper to check if a driver document ID is associated with the current user's UID
    function isDriverByDocId(driverId) {
      // Check if there's a driver document with this ID where uid matches auth.uid
      return exists(/databases/$(database)/documents/drivers/$(driverId)) &&
        get(/databases/$(database)/documents/drivers/$(driverId)).data.uid == request.auth.uid;
    }
  }
} 
